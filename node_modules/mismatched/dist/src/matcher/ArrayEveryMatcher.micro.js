"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("array.every:", () => {
    describe("assertThat():", () => {
        it('number', () => {
            const actual = [2, 2, 2];
            assertThat_1.assertThat(actual).is(match_1.match.array.every(2));
        });
        it('string', () => {
            const actual = ["b", "b"];
            assertThat_1.assertThat(actual).is(match_1.match.array.every("b"));
        });
        it('does not match', () => {
            const actual = ["a", "b"];
            assertThat_1.assertThat(actual).failsWith(match_1.match.array.every("b"), { [MatchResult_1.MatchResult.was]: ["a", "b"], [MatchResult_1.MatchResult.expected]: { "array.every": "b" } });
        });
        it('does not match: errors', () => {
            const actual = ["a", "b"];
            assertThat_1.assertThat(actual).failsWith(match_1.match.array.every("b"), { [MatchResult_1.MatchResult.was]: ["a", "b"], [MatchResult_1.MatchResult.expected]: { "array.every": "b" } });
            const mismatched = [];
            const matcher = match_1.match.array.every("b");
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, ["a", "b"]);
            assertThat_1.assertThat(mismatched).is([
                { "actual[0]": "a", expected: "b" }
            ]);
        });
    });
    describe("validateThat():", () => {
        const expected = match_1.match.array.every(match_1.match.ofType.number());
        it("succeeds", () => {
            const validation = validateThat_1.validateThat([2, 2, 2]).satisfies(expected);
            assertThat_1.assertThat(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = validateThat_1.validateThat([2, 2, "3"]).satisfies(expected);
            assertThat_1.assertThat(validation.passed()).is(false);
            assertThat_1.assertThat(validation.errors).is([
                `{"actual[2]": "3", expected: "ofType.number"}`
            ]);
        });
        it("fails as not an array", () => {
            const validation = validateThat_1.validateThat(3).satisfies(expected);
            assertThat_1.assertThat(validation.passed()).is(false);
            assertThat_1.assertThat(validation.errors).is([
                `{actual: 3, expected: "array expected"}`
            ]);
        });
    });
});
//# sourceMappingURL=ArrayEveryMatcher.micro.js.map