"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("NotMatcher()", () => {
    describe("assertThat():", () => {
        it("matches", () => {
            assertThat_1.assertThat(2).is(match_1.match.not(4));
            assertThat_1.assertThat(2).isNot(4);
            assertThat_1.assertThat(true).is(match_1.match.not(false));
            assertThat_1.assertThat({ f: 2 }).is(match_1.match.not("a"));
        });
        it("mismatches", () => {
            assertThat_1.assertThat(2).failsWith(match_1.match.not(2), { [MatchResult_1.MatchResult.was]: 2, [MatchResult_1.MatchResult.expected]: { not: 2 } });
            assertThat_1.assertThat({ f: 2 }).failsWith(match_1.match.not({ f: 2 }), { [MatchResult_1.MatchResult.was]: { f: 2 }, [MatchResult_1.MatchResult.expected]: { not: { f: 2 } } });
        });
        it("mismatches: errors", () => {
            const mismatched = [];
            const matcher = match_1.match.not(2);
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, 2);
            assertThat_1.assertThat(mismatched).is([
                { actual: 2, expected: { not: 2 } }
            ]);
        });
    });
    describe("validateThat():", () => {
        const expected = match_1.match.not(match_1.match.ofType.number());
        it("succeeds", () => {
            const validation = validateThat_1.validateThat("3").satisfies(expected);
            assertThat_1.assertThat(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = validateThat_1.validateThat(3).satisfies(expected);
            assertThat_1.assertThat(validation.passed()).is(false);
            assertThat_1.assertThat(validation.errors).is([
                `{actual: 3, expected: {not: "ofType.number"}}`
            ]);
        });
    });
});
//# sourceMappingURL=NotMatcher.micro.js.map