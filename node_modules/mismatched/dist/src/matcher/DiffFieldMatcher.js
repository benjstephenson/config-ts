"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiffFieldMatcher = void 0;
const DiffMatcher_1 = require("./DiffMatcher");
const matchMaker_1 = require("../matchMaker/matchMaker");
const ObjectKeyMatcher_1 = require("./ObjectKeyMatcher");
const BindMatcher_1 = require("./BindMatcher");
class DiffFieldMatcher extends DiffMatcher_1.DiffMatcher {
    constructor(fieldName, matcher) {
        super();
        this.fieldName = fieldName;
        this.matcher = matcher;
        this.complexity = matcher.complexity;
    }
    mismatches(context, errors, actual) {
        return this.matcher.mismatches(context.add("." + this.fieldName), errors, actual[this.fieldName]);
    }
    describe() {
        return { [this.fieldName]: this.matcher.describe() };
    }
    isKey() {
        return this.matcher instanceof ObjectKeyMatcher_1.ObjectKeyMatcher;
    }
    isBind() {
        return this.matcher instanceof BindMatcher_1.BindMatcher;
    }
    static make(fieldName, expected) {
        return new DiffFieldMatcher(fieldName, matchMaker_1.matchMaker(expected));
    }
    static makeAll(obj) {
        return Object.keys(obj)
            .map(key => new DiffFieldMatcher(key, matchMaker_1.matchMaker(obj[key])));
    }
}
exports.DiffFieldMatcher = DiffFieldMatcher;
//# sourceMappingURL=DiffFieldMatcher.js.map