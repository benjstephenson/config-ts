"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const match_1 = require("../match");
const assertThat_1 = require("../assertThat");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("IsEqualsMatcher:", () => {
    describe("assertThat():", () => {
        describe('matches exact same value:', () => {
            it('number', () => {
                const actual = 3.4;
                assertThat_1.assertThat(actual).is(match_1.match.isEquals(actual));
                assertThat_1.assertThat(actual).is(actual);
            });
            it('boolean', () => {
                const actual = false;
                assertThat_1.assertThat(actual).is(match_1.match.isEquals(actual));
                assertThat_1.assertThat(actual).is(actual);
                assertThat_1.assertThat(true).is(true);
            });
            it('Symbol', () => {
                const actual = Symbol('test');
                assertThat_1.assertThat(actual).is(match_1.match.isEquals(actual));
                assertThat_1.assertThat(actual).is(actual);
            });
            it('undefined', () => {
                const actual = undefined;
                assertThat_1.assertThat(actual).is(match_1.match.isEquals(actual));
                assertThat_1.assertThat(actual).is(actual);
            });
            it('null', () => {
                const actual = null;
                assertThat_1.assertThat(actual).is(match_1.match.isEquals(actual));
                assertThat_1.assertThat(actual).is(actual);
            });
            it('object itself', () => {
                const actual = { a: "b" };
                assertThat_1.assertThat(actual).is(match_1.match.isEquals(actual));
                assertThat_1.assertThat(actual).isNot(match_1.match.isEquals({ a: "b" }));
            });
            it('array itself', () => {
                const actual = [1, 2, 3];
                assertThat_1.assertThat(actual).is(match_1.match.isEquals(actual));
                assertThat_1.assertThat(actual).isNot(match_1.match.isEquals([1, 2, 3]));
            });
            it('NaN is odd, as it is not equal to itself', () => {
                const actual = NaN;
                assertThat_1.assertThat(actual).isNot(match_1.match.isEquals(actual));
            });
        });
        describe('mismatches different values:', () => {
            it('number', () => {
                assertThat_1.assertThat(3.4).failsWith(3.5, { [MatchResult_1.MatchResult.was]: 3.4, [MatchResult_1.MatchResult.expected]: 3.5 });
                assertThat_1.assertThat(3.4).failsWith(null, { [MatchResult_1.MatchResult.was]: 3.4, [MatchResult_1.MatchResult.expected]: null });
                assertThat_1.assertThat(null).failsWith(3, { [MatchResult_1.MatchResult.was]: null, [MatchResult_1.MatchResult.expected]: 3 });
            });
            it('number: errors', () => {
                const mismatched = [];
                const matcher = match_1.match.isEquals(3.5);
                matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, 3.4);
                assertThat_1.assertThat(mismatched).is([
                    { actual: 3.4, expected: 3.5 }
                ]);
            });
            it('boolean', () => {
                assertThat_1.assertThat(true).failsWith(false, { [MatchResult_1.MatchResult.was]: true, [MatchResult_1.MatchResult.expected]: false });
            });
            it('Symbol', () => {
                assertThat_1.assertThat(Symbol("a"))
                    .failsWith(Symbol("b"), { [MatchResult_1.MatchResult.was]: "Symbol(a)", [MatchResult_1.MatchResult.expected]: "Symbol(b)" });
            });
            it('undefined', () => {
                assertThat_1.assertThat(undefined).failsWith(2, { [MatchResult_1.MatchResult.was]: undefined, [MatchResult_1.MatchResult.expected]: 2 });
            });
            it('null', () => {
                assertThat_1.assertThat(null).failsWith(2, { [MatchResult_1.MatchResult.was]: null, [MatchResult_1.MatchResult.expected]: 2 });
            });
            it('various', () => {
                assertThat_1.assertThat(3).failsWith("2", { [MatchResult_1.MatchResult.was]: 3, [MatchResult_1.MatchResult.expected]: "2" });
            });
        });
    });
    describe("validateThat():", () => {
        const expectedValue = { a: 3 };
        const expected = match_1.match.isEquals(expectedValue);
        it("succeeds", () => {
            const validation = validateThat_1.validateThat(expectedValue).satisfies(expected);
            assertThat_1.assertThat(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = validateThat_1.validateThat(false).satisfies(expected);
            assertThat_1.assertThat(validation.passed()).is(false);
            assertThat_1.assertThat(validation.errors).is([
                `{actual: false, expected: {a: 3}}`
            ]);
        });
    });
});
//# sourceMappingURL=isEqualsMatcher.micro.js.map