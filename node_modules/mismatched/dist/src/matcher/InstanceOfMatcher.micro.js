"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("InstanceOfMatcher:", () => {
    describe("assertThat():", () => {
        it("Matches", () => {
            assertThat_1.assertThat(new Date()).is(match_1.match.instanceOf(Date));
            assertThat_1.assertThat({ a: 2 }).is(match_1.match.instanceOf(Object));
        });
        it("Mismatches", () => {
            assertThat_1.assertThat("ab")
                .failsWith(match_1.match.instanceOf(Date), { [MatchResult_1.MatchResult.was]: "ab", [MatchResult_1.MatchResult.expected]: { instanceOf: "Date" } });
            assertThat_1.assertThat(null)
                .failsWith(match_1.match.instanceOf(Date), { [MatchResult_1.MatchResult.was]: null, [MatchResult_1.MatchResult.expected]: { instanceOf: "Date" } });
            assertThat_1.assertThat(undefined)
                .failsWith(match_1.match.instanceOf(Date), { [MatchResult_1.MatchResult.expected]: { instanceOf: "Date" } });
        });
        it("Mismatches:errors", () => {
            const mismatched = [];
            const matcher = match_1.match.instanceOf(Date);
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, "ab");
            assertThat_1.assertThat(mismatched).is([
                { actual: "ab", expected: { instanceOf: "Date" } }
            ]);
        });
    });
    describe("validateThat():", () => {
        const expected = match_1.match.instanceOf(Object);
        it("succeeds", () => {
            const validation = validateThat_1.validateThat({ a: 3 }).satisfies(expected);
            assertThat_1.assertThat(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = validateThat_1.validateThat(false).satisfies(expected);
            assertThat_1.assertThat(validation.passed()).is(false);
            assertThat_1.assertThat(validation.errors).is([
                `{actual: false, expected: {instanceOf: "Object"}}`
            ]);
        });
    });
});
//# sourceMappingURL=InstanceOfMatcher.micro.js.map