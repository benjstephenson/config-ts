import { Applicative, Kind, HKT } from '../hkt';
export declare const keys: <K extends string>(r: Record<K, any>) => K[];
export declare const unit: Record<string, never>;
export declare const traverse: <F extends HKT>(F: Applicative<F>) => <R, E, A, B>(f: (a: A) => Kind<F, R, E, B>, ra: Record<string, A>) => Kind<F, R, E, Record<string, B>>;
export declare function sequence<F extends HKT>(F: Applicative<F>): <R, E, Rec extends Record<string, Kind<F, R, E, any>>>(fa: Rec) => Kind<F, R, E, {
    [K in keyof Rec]: Rec[K] extends Kind<F, R, E, infer A> ? A : never;
}>;
