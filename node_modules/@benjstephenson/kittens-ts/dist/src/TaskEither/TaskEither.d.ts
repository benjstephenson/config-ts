import * as E from '../Either';
import * as T from '../Task';
export declare class TaskEither<E, A> {
    private task;
    constructor(task: T.Task<E.Either<E, A>>);
    get(): T.Task<E.Either<E, A>>;
    static of<E, A>(a: A): TaskEither<E, A>;
    static fromEither<E, A>(e: E.Either<E, A>): TaskEither<E, A>;
    static fromTask<E, A>(t: T.Task<A>): TaskEither<E, A>;
    run(): Promise<E.Either<E, A>>;
    map<B>(f: (a: A) => B): TaskEither<E, B>;
    mapEither<E2, B>(f: (a: A) => E.Either<E2, B>): TaskEither<E | E2, B>;
    flatMap<E2, B>(f: (a: A) => TaskEither<E2, B>): TaskEither<E | E2, B>;
}
