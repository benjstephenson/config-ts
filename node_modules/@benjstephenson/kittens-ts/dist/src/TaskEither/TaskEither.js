"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskEither = void 0;
const E = __importStar(require("../Either"));
const T = __importStar(require("../Task"));
const instances_1 = require("./instances");
/*
 * Representas a computation that may fail with E
 * Ultimately this just wraps an EitherT instance but to make it friendlier for
 * those who are more used to class APIs rather than function based ones, we do a lot of
 * unboxing and reboxing in the monad contract.
 */
class TaskEither {
    constructor(task) {
        this.task = task;
    }
    get() {
        return this.task;
    }
    static of(a) {
        return instances_1.monad.of(a);
    }
    static fromEither(e) {
        return new TaskEither(T.of(e));
    }
    static fromTask(t) {
        return new TaskEither(t.map((a) => E.right(a)));
    }
    run() {
        return this.task.run();
    }
    map(f) {
        return instances_1.monad.map(f, this);
    }
    mapEither(f) {
        return instances_1.monad.flatMap((a) => TaskEither.fromEither(f(a)), this);
    }
    flatMap(f) {
        return instances_1.monad.flatMap(f, this);
    }
}
exports.TaskEither = TaskEither;
