import * as Eq from '../Equal';
import { Semigroup } from '../Semigroup';
import { Contravariant, HKT } from '../hkt';
import { Monoid } from '../Monoid';
export declare type Ordering = -1 | 0 | 1;
export interface OrderableF extends HKT {
    readonly type: Orderable<this['A']>;
}
export interface Orderable<A> extends Eq.Equal<A> {
    compare: (x: A, y: A) => Ordering;
}
export declare const from: <A>(compare: (x: A, y: A) => Ordering) => Orderable<A>;
export declare const number: Orderable<number>;
export declare const string: Orderable<string>;
export declare const boolean: Orderable<boolean>;
export declare const contramap: <A, B>(f: (b: B) => A, ord: Orderable<A>) => Orderable<B>;
export declare const contravariant: Contravariant<OrderableF>;
export declare const getSemigroup: <A>() => Semigroup<Orderable<A>>;
export declare const getMonoid: <A>() => Monoid<Orderable<A>>;
