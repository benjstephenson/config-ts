import { Lazy } from '../hkt';
export declare class Task<A> {
    private readonly thunk;
    constructor(thunk: Lazy<Promise<A>>);
    static of<A>(a: A): Task<A>;
    run(): Promise<A>;
    get(): Lazy<Promise<A>>;
    then<TResult1 = A, TResult2 = never>(onResolved: (value: A) => TResult1 | PromiseLike<TResult1>, onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;
    map<B>(f: (a: A) => B): Task<B>;
    flatMap<B>(f: (a: A) => Task<B>): Task<B>;
}
