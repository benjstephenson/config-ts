import { Task } from './Task';
import { Applicative, HKT, Kind } from '../hkt';
export declare const of: <A>(a: A) => Task<A>;
export declare const map: <A, B>(fn: (x: A) => B, fa: Task<A>) => Task<B>;
export declare const flatMap: <A, B>(fn: (x: A) => Task<B>, fa: Task<A>) => Task<B>;
export declare const ap: <A, B>(fa: Task<A>, fab: Task<(a: A) => B>) => Task<B>;
export declare const traverse2: <F extends HKT>(F: Applicative<F>) => <R, E, A, B>(f: (a: A) => Kind<F, R, E, B>, fa: Task<A>) => Kind<F, R, E, Task<B>>;
export declare const traverse: <A, B>(values: A[], f: (x: A) => Task<B>) => Task<B[]>;
export declare const sequence: <A>(values: Task<A>[]) => Task<A[]>;
