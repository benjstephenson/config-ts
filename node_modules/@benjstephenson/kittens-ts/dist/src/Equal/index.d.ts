import { Contravariant, HKT } from '../hkt';
export interface Equal<A> {
    equals: (x: A, y: A) => boolean;
}
export interface EqualF extends HKT {
    readonly type: Equal<this['A']>;
}
export declare const contramap: <A, B>(f: (b: B) => A, eqA: Equal<A>) => Equal<B>;
export declare const contravariant: Contravariant<EqualF>;
export declare const from: <A>(equals: (x: A, y: A) => boolean) => Equal<A>;
export declare const withDefault: <A>() => Equal<A>;
export declare const never: <A>() => Equal<A>;
export declare function record<R extends Record<string, any>>(equalities: {
    [K in keyof R]: Equal<R[K]>;
}): Equal<R>;
export declare const string: Equal<string>;
export declare const number: Equal<number>;
export declare const boolean: Equal<boolean>;
export declare const date: Equal<Date>;
