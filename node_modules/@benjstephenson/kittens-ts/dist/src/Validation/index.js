"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRecordValidation = exports.getValidationNel = exports.getEitherValidation = exports.getMonadValidation = void 0;
const A = __importStar(require("../Array"));
const R = __importStar(require("../Record"));
const Sg = __importStar(require("../Semigroup"));
const E = __importStar(require("../Either"));
const getZippable = (F) => (fa, fb) => F.ap(fa, F.map((b) => (a) => [a, b], fb));
const getMonadValidation = (M, F, E) => (S) => {
    const zip = getZippable(M);
    return {
        of: M.of,
        map: M.map,
        flatMap: M.flatMap,
        ap: (fa, fab) => M.flatMap(([ea, efab]) => {
            if (ea.isLeft() && efab.isLeft())
                return F.fail(S.concat(ea.get(), efab.get()));
            else if (ea.isLeft())
                return F.fail(ea.get());
            else if (efab.isLeft())
                return F.fail(efab.get());
            else
                return M.of(efab.get()(ea.get()));
        }, zip(E.toEither(fa), E.toEither(fab))),
    };
};
exports.getMonadValidation = getMonadValidation;
const getEitherValidation = () => (0, exports.getMonadValidation)(E.monad, E.failable, E.eitherable)(Sg.nel());
exports.getEitherValidation = getEitherValidation;
const getValidationNel = () => A.sequenceT((0, exports.getEitherValidation)());
exports.getValidationNel = getValidationNel;
const getRecordValidation = () => R.sequence((0, exports.getEitherValidation)());
exports.getRecordValidation = getRecordValidation;
