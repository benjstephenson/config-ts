"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.optionT = exports.monad = exports.traversable = exports.foldable = exports.applicative = exports.apply = exports.functor = exports.getEquals = exports.getMonoid = exports.getSemigroup = void 0;
const fns = __importStar(require("./functions"));
const hkt_1 = require("../hkt");
const getSemigroup = (S) => ({
    concat: (x, y) => (x.isNone() ? y : y.isNone() ? x : fns.some(S.concat(x.get(), y.get()))),
});
exports.getSemigroup = getSemigroup;
const getMonoid = (sg) => (Object.assign(Object.assign({}, (0, exports.getSemigroup)(sg)), { empty: fns.none() }));
exports.getMonoid = getMonoid;
const getEquals = (eq) => ({
    equals: (a, b) => a.isSome() && b.isSome() && eq.equals(a.get(), b.get()),
});
exports.getEquals = getEquals;
exports.functor = {
    map: fns.map,
};
exports.apply = Object.assign(Object.assign({}, exports.functor), { ap: fns.ap });
exports.applicative = Object.assign(Object.assign({}, exports.apply), { of: fns.of });
exports.foldable = {
    fold: (f, init, fa) => (fa.isNone() ? init : f(init, fa.get())),
};
exports.traversable = {
    traverse: fns.traverse,
    sequence: fns.sequence,
};
exports.monad = optionT(hkt_1.identityM);
// export const monad: Monad<OptionF> = {
//   ...applicative,
//   flatMap: fns.flatMap,
// }
function optionT(F) {
    return {
        ap: (fa, fab) => F.flatMap((a) => F.map((ab) => fns.ap(a, ab), fab), fa),
        of: (a) => F.of(fns.some(a)),
        map: (f, fa) => F.map((a) => fns.map(f, a), fa),
        flatMap: (f, fa) => F.flatMap((o) => (o.isNone() ? F.of(fns.none()) : f(o.get())), fa),
    };
}
exports.optionT = optionT;
