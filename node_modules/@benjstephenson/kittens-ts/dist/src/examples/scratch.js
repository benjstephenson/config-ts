"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const E = __importStar(require("../Either"));
const A = __importStar(require("../Array"));
const O = __importStar(require("../Option"));
const T = __importStar(require("../Task"));
const hkt_1 = require("../hkt");
const functions_1 = require("../functions");
const foo = [1, 2, 3].map((x) => O.some(x));
const bar = A.sequence(O.applicative)([O.some(1), O.some(2), O.some(3)]);
const a = A.traverse(O.applicative)((x) => O.some(x.toString()), [1, 2, 3]);
const b = A.sequenceT(O.apply)(O.some(1), O.some(2), O.some(''), O.some(true));
const optionMonad = O.optionT(hkt_1.identityM);
const apply2 = (0, hkt_1.getApply)(optionMonad);
const r = E.right([1]);
const seq = E.sequence(A.applicative)(r);
const f = (x) => (x > 1 ? E.left('oh dear') : E.right(x));
const g = (x) => (x > 1 ? E.left(false) : E.right(x.toString()));
const eb = E.right(1).flatMap(f).flatMap(g);
const ea = E.flatMap(g, E.flatMap(f, E.left(1)));
const c = (0, functions_1.pipe)(E.left(1), E.flatMap_(f), E.flatMap_(g));
const taskArray = [T.of(() => Promise.resolve(1))];
const traversedTask = A.traverse(T.applicative)((a) => a.map((x) => x.toString()), taskArray);
const sequencedTask = A.sequence(T.applicative)(taskArray);
