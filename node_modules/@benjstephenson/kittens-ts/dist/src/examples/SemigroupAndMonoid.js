"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const S = __importStar(require("../Semigroup"));
/*
 * A Semigroup describes how we can combine two things together.
 * Think + for numbers, [...a, ...b] for lists.
 * Essentially, for a type A, a semigroup is an f: (x: A, y: A) => A
 */
// These are all semigroups for number
1 + 1;
1 * 1;
1 / 1;
const left = (x, _) => x;
const right = (_, y) => y;
const max = (x, y) => (x > y ? x : y);
const min = (x, y) => (x < y ? x : y);
const user1 = { name: 'Bobby Bobson', registeredDate: new Date(), loginCount: 1 };
const user2 = { name: 'Bobby Bobson 2', registeredDate: new Date(new Date().setMonth(2)), loginCount: 5 };
const earliestUser = S.record({
    name: S.string,
    registeredDate: S.from((x, y) => (x.valueOf() < y.valueOf() ? x : y)),
    loginCount: S.sum,
});
earliestUser.concat(user1, user2);
