"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.eitherT = exports.getEquals = exports.eitherable = exports.failable = exports.traversable = exports.foldable = exports.monad = exports.applicative = exports.apply = exports.functor = exports.getSemigroup = void 0;
const fns = __importStar(require("./functions"));
const getSemigroup = (S) => ({
    concat: (x, y) => (y.isLeft() ? x : x.isLeft() ? y : fns.right(S.concat(x.get(), y.get()))),
});
exports.getSemigroup = getSemigroup;
exports.functor = {
    map: fns.map,
};
exports.apply = Object.assign(Object.assign({}, exports.functor), { ap: fns.ap });
exports.applicative = Object.assign(Object.assign({}, exports.apply), { of: fns.of });
exports.monad = Object.assign(Object.assign({}, exports.applicative), { flatMap: fns.flatMap });
exports.foldable = {
    fold: fns.fold,
};
exports.traversable = {
    traverse: fns.traverse,
    sequence: fns.sequence,
};
exports.failable = {
    fail: fns.left,
};
exports.eitherable = {
    toEither: fns.right,
};
const getEquals = (eqE, eqA) => ({
    equals: (x, y) => x.isLeft() && y.isLeft()
        ? eqE.equals(x.get(), y.get())
        : x.isRight() && y.isRight()
            ? eqA.equals(x.get(), y.get())
            : false,
});
exports.getEquals = getEquals;
function eitherT(F) {
    return {
        ap: (fa, fab) => F.flatMap((a) => F.map((ab) => fns.ap(a, ab), fab), fa),
        of: (a) => F.of(fns.right(a)),
        map: (ff, faa) => F.map((aa) => fns.map(ff, aa), faa),
        flatMap: (f, faa) => F.flatMap((aa) => (aa.isLeft() ? F.of(fns.leftWiden(fns.left(aa.get()))) : f(aa.get())), faa),
    };
}
exports.eitherT = eitherT;
