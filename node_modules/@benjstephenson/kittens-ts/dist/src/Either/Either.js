"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Right = exports.Left = void 0;
const O = __importStar(require("../Option"));
const instances_1 = require("./instances");
const Eq = __importStar(require("../Equal"));
const fns = __importStar(require("./functions"));
class Left {
    constructor(value) {
        this.value = value;
        this.tag = 'Left';
    }
    isLeft() {
        return true;
    }
    isRight() {
        return false;
    }
    equals(other, eqE = Eq.withDefault(), eqA = Eq.withDefault()) {
        return (0, instances_1.getEquals)(eqE, eqA).equals(this, other);
    }
    get() {
        return this.value;
    }
    getOrElse(other) {
        return other;
    }
    ap(fab) {
        return fns.ap(this, fab);
    }
    map(f) {
        return fns.map(f, this);
    }
    mapLeft(f) {
        return fns.mapLeft(f, this);
    }
    flatMap(f) {
        return fns.flatMap(f, this);
    }
    bimap(fo) {
        return fns.bimap(fo, this);
    }
    fold(f, init) {
        return fns.fold(f, init, this);
    }
    toOption() {
        return O.none();
    }
}
exports.Left = Left;
class Right {
    constructor(value) {
        this.value = value;
        this.tag = 'Right';
    }
    isLeft() {
        return false;
    }
    isRight() {
        return true;
    }
    get() {
        return this.value;
    }
    equals(other, eqE = Eq.withDefault(), eqA = Eq.withDefault()) {
        return (0, instances_1.getEquals)(eqE, eqA).equals(this, other);
    }
    getOrElse(_other) {
        return this.value;
    }
    ap(fab) {
        return fns.ap(this, fab);
    }
    map(f) {
        return fns.map(f, this);
    }
    mapLeft(_f) {
        return this;
    }
    flatMap(f) {
        return fns.flatMap(f, this);
    }
    bimap(fo) {
        return fns.bimap(fo, this);
    }
    fold(f, init) {
        return fns.fold(f, init, this);
    }
    toOption() {
        return O.some(this.value);
    }
}
exports.Right = Right;
