import type { Either } from './Either';
import { Apply, Functor, HKT, Monad, Applicative, EitherT, Foldable, Traversable, Failable, Eitherable } from '../hkt';
import * as Eq from '../Equal';
import { Semigroup } from '../Semigroup';
export interface EitherF extends HKT {
    readonly type: Either<this['E'], this['A']>;
}
export declare const getSemigroup: <E, A>(S: Semigroup<A>) => Semigroup<Either<E, A>>;
export declare const functor: Functor<EitherF>;
export declare const apply: Apply<EitherF>;
export declare const applicative: Applicative<EitherF>;
export declare const monad: Monad<EitherF>;
export declare const foldable: Foldable<EitherF>;
export declare const traversable: Traversable<EitherF>;
export declare const failable: Failable<EitherF>;
export declare const eitherable: Eitherable<EitherF>;
export declare const getEquals: <E, A>(eqE: Eq.Equal<E>, eqA: Eq.Equal<A>) => Eq.Equal<Either<E, A>>;
export declare function eitherT<F extends HKT>(F: Monad<F>): Monad<EitherT<F>>;
